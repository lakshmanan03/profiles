import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { TimePicker } from '@mui/lab';
import { TextField, Button } from '@mui/material';

function MyComponent() {
  const {
    control,
    handleSubmit,
    formState: { errors },
    watch
  } = useForm();

  const onSubmit = (data) => {
    console.log(data); // You can further process the valid time data
  };

  const fromTime = watch('fromTime');
  const toTime = watch('toTime');

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <Controller
        name="fromTime"
        control={control}
        defaultValue=""
        rules={{
          required: 'From time is required',
          validate: (value) => {
            const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
            if (!timeRegex.test(value)) {
              return 'Invalid time format (HH:MM)';
            }
            return true;
          }
        }}
        render={({ field }) => (
          <TimePicker
            {...field}
            label="From Time"
            renderInput={(params) => (
              <TextField
                {...params}
                error={Boolean(errors.fromTime)}
                helperText={errors.fromTime ? errors.fromTime.message : ''}
              />
            )}
          />
        )}
      />
      <Controller
        name="toTime"
        control={control}
        defaultValue=""
        rules={{
          required: 'To time is required',
          validate: (value) => {
            const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
            if (!timeRegex.test(value)) {
              return 'Invalid time format (HH:MM)';
            }
            if (fromTime && value <= fromTime) {
              return 'To time must be greater than from time';
            }
            return true;
          }
        }}
        render={({ field }) => (
          <TimePicker
            {...field}
            label="To Time"
            renderInput={(params) => (
              <TextField
                {...params}
                error={Boolean(errors.toTime)}
                helperText={errors.toTime ? errors.toTime.message : ''}
              />
            )}
          />
        )}
      />
      <Button type="submit" variant="contained" color="primary">Submit</Button>
    </form>
  );
}

export default MyComponent;
