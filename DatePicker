import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { TimeClock } from '@mui/x-date-pickers/TimeClock';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { Button, Box, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';
import { differenceInMinutes } from 'date-fns';

const TimeForm = () => {
  const { handleSubmit, control, getValues, formState: { errors } } = useForm({
    defaultValues: {
      fromTime: new Date(), // Example: set default value to current date/time
      toTime: null, // Example: set default value to null (no initial value)
    },
  });

  const [openFromTimePicker, setOpenFromTimePicker] = React.useState(false);
  const [openToTimePicker, setOpenToTimePicker] = React.useState(false);

  const onSubmit = (data) => {
    console.log('Form Data:', data);
  };

  const validateTimeOrder = () => {
    const { fromTime, toTime } = getValues();
    if (fromTime && toTime && differenceInMinutes(toTime, fromTime) === 0) {
      return 'From time and To time cannot be the same.';
    }
    return true;
  };

  const validateDate = (value) => {
    if (!(value instanceof Date) || isNaN(value)) {
      return 'Invalid time format.';
    }
    return true;
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <form onSubmit={handleSubmit(onSubmit)}>
        <Box display="flex" flexDirection="column" gap={2}>
          <Controller
            name="fromTime"
            control={control}
            rules={{ 
              required: 'From Time is required.', 
              validate: validateDate
            }}
            render={({ field }) => (
              <>
                <TextField
                  {...field}
                  label="From Time"
                  fullWidth
                  onClick={() => setOpenFromTimePicker(true)}
                  error={!!errors.fromTime}
                  helperText={errors.fromTime?.message}
                  value={field.value ? field.value.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}
                  InputProps={{
                    readOnly: true,
                  }}
                />
                <Dialog open={openFromTimePicker} onClose={() => setOpenFromTimePicker(false)}>
                  <DialogTitle>Select From Time</DialogTitle>
                  <DialogContent>
                    <TimeClock
                      ampm={false}
                      value={field.value} // Use field.value as the default value for TimeClock
                      onChange={(newValue) => {
                        field.onChange(newValue);
                        setOpenFromTimePicker(false);
                      }}
                    />
                  </DialogContent>
                  <DialogActions>
                    <Button onClick={() => setOpenFromTimePicker(false)}>Cancel</Button>
                  </DialogActions>
                </Dialog>
              </>
            )}
          />

          <Controller
            name="toTime"
            control={control}
            rules={{ 
              required: 'To Time is required.', 
              validate: value => {
                const fromTime = getValues().fromTime;
                if (!(value instanceof Date) || isNaN(value)) {
                  return 'Invalid time format.';
                }
                if (fromTime && value && differenceInMinutes(value, fromTime) === 0) {
                  return 'From time and To time cannot be the same.';
                }
                return true;
              }
            }}
            render={({ field }) => (
              <>
                <TextField
                  {...field}
                  label="To Time"
                  fullWidth
                  onClick={() => setOpenToTimePicker(true)}
                  error={!!errors.toTime}
                  helperText={errors.toTime?.message}
                  value={field.value ? field.value.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}
                  InputProps={{
                    readOnly: true,
                  }}
                />
                <Dialog open={openToTimePicker} onClose={() => setOpenToTimePicker(false)}>
                  <DialogTitle>Select To Time</DialogTitle>
                  <DialogContent>
                    <TimeClock
                      ampm={false}
                      value={field.value} // Use field.value as the default value for TimeClock
                      onChange={(newValue) => {
                        field.onChange(newValue);
                        setOpenToTimePicker(false);
                      }}
                    />
                  </DialogContent>
                  <DialogActions>
                    <Button onClick={() => setOpenToTimePicker(false)}>Cancel</Button>
                  </DialogActions>
                </Dialog>
              </>
            )}
          />

          <Button type="submit" variant="contained" color="primary">
            Submit
          </Button>
        </Box>
      </form>
    </LocalizationProvider>
  );
};

export default TimeForm;
